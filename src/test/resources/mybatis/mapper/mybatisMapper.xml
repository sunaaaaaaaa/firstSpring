<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace ="com.kh.spring.mybatis.MybatisRepository">
  
  
  	<select id="selectRentAndMemberById" resultType="java.util.Map">
  		select * from member join rent_master using(user_id)
  		where user_id = #{userId}
  	</select>
  	
  	<resultMap type="map" id="rentData">
  		<!-- 
  			column : map에 담을 컬럼명
  			javaType : map에 담을때 어떤타입의 데이터로 저장할지 결정
  			property : map에 담을때 사용할 키값
  			 -->
  	<result column="user_id" javaType="string" property="userId"/>
  	<result column="title" javaType="string" property=""/>
	<result column="rm_idx" javaType="string" property="rmIdx"/>
 	<result column="rent_book_cnt" javaType="int" property="rentBookCnt"/>
	<result column="reg_date" javaType="date" property="regDate"/>
	<result column="rb_idx" javaType="string" property="rbIdx"/>
	<result column="bk_idx" javaType="string" property="bkIdx"/>
  	</resultMap>
  	
  	<select id="selectRentDataByUserId" resultMap="rentData">
  		select user_id, title, rm_idx,rent_book_cnt, rm.reg_date,rb_idx,bk_idx,tell
  		from member
  		inner join rent_master rm using(user_id)
  		inner join rent_book using(rm_idx)
  		where user_id = #{userId}
  	</select>
  	
  	
  	<insert id="procedureWithTable" statementType="CALLABLE">
	  	{call sp_rent_insert(#{userId, mode=IN},
	  	#{title, mode=IN},{rentBookCnt, mode=IN},
	  	#{bkIdxs, mode=IN, jdbcType=ARRAY})}
	</insert>
  	
  	<select id="dynamicQueryIF" resultType="map">
  		select * from book
  		where
  		<if test="searchType == 'info'">
  			info like '%'||#{keyword}||'%'
  		</if>
  		<if test="searchType == 'author'">
  			author like '%'||#{keyword}||'%'
  		</if>
  	</select>
  	
  	<select id="dynamicQueryChoose" resultType="map">
  		select * from book
  		where
  		<choose>
  			<when test="searchType == 'info'">
  				info like '%'||#{keyword}||'%'
 			</when>
  			<when test="searchType == 'author'">
  				author like '%'||#{keyword}||'%'
 			</when>
 			<otherwise>
 				title like '%'||#{keyword}||'%'
 			</otherwise>
  		</choose>
  	</select>

  	<select id="dynamicQueryWhereAndForeachTag" resultType="map">
  		select * from book
  		<where>
  			<foreach collection="searchTypes" item="type">
  				<if test="type =='rentable'">
  					or book_amt > 0
  				</if>
  				<if test="type =='title'">
  					or title like '%'||#{keyword}||'%'
  				</if>
  				<if test="type =='author'">
  					or author like '%'||#{keyword}||'%'
  				</if>
  			</foreach>
  		</where>
  	</select>
  	
  	<select id="dynamicQueryForeachTagWithList" resultType="map">
  		select * from member
  		where user_id in
  		<foreach collection="list" item="userId" open="(" close=")" separator=",">
  			#{userId}
  		</foreach>  	
  	</select>
  	
  	<insert id="insertTemplate">
  		insert into ${tableName}
  		<!-- foreach의 collection map을 넘길경우 index속성으로 key값을 저장 -->
  		<if test="primaryKey !=null">
	  		(#{primaryKey.col}
	  		<foreach collection="data" index="key" item="val" open="(" close=")" separator=",">
	  			${key}
	  		</foreach>
	  		values(${primaryKey.data}
	  		<foreach collection="data" index="key" item="val" open="(" close=")" separator=",">
				#{val}
	  		</foreach>
  		</if>
  		<if test="primaryKey ==null">
	  		<foreach collection="data" index="key" item="val" open="(" close=")" separator=",">
	  			${key}
	  		</foreach>
	  		values
	  		<foreach collection="data" index="key" item="val" open="(" close=")" separator=",">
				#{val}
	  		</foreach>
  		</if>
  	</insert>
  	
  	<update id="dynamicQuerySetTag">
  		update member
  		<set>
  			<if test="password != null">
  				password = #{password}
  			</if>
  			<if test="tell != null">
  				,tell = #{tell}
  			</if>
  			<if test="email != null">
  				,email = #{email}
  			</if>
  		</set>
  	</update>
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	<insert id="test01">
  		insert into book(bk_idx,title,author)
  		values(sc_bk_idx.nextval,#{title},#{author})
  	</insert>
  	
  	<update id="test02">
  		update rent_book set extension_cnt=0 where extension_cnt>=2
  	</update>
  	
  	<delete id="test03">
  		delete from member where reg_date <![CDATA[<]]> '2021/10/01'
  		and reg_date > '2021/09/01' <!-- BETWEEN쓰는게 더좋음 &lt; &lte; &gt; &gte;-->
  	</delete>
  	
  	<select id="test04" resultType="map">
  		select * 
  		from (select rownum rnum, b.* 
		  		from book b 
		  		order by rent_cnt desc)
  		where rnum &lt; 4
  	</select>
  	
  	
  	
  	
  </mapper>